define(["../polymer/polymer-legacy.js", "../iron-meta/iron-meta.js", "../iron-flex-layout/iron-flex-layout.js", "../polymer/lib/legacy/polymer-fn.js", "../polymer/lib/utils/html-tag.js", "../polymer/lib/legacy/polymer.dom.js"], function (_polymerLegacy, _ironMeta, _ironFlexLayout, _polymerFn, _htmlTag, _polymerDom) {
  "use strict";

  var _templateObject_84cd45f0026111ea9a95c9e0feb112aa = /*#__PURE__*/ babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n"]);

  (0, _polymerFn.Polymer)({
    _template: (0, _htmlTag.html)(_templateObject_84cd45f0026111ea9a95c9e0feb112aa),
    is: 'iron-icon',
    properties: {
      /**
       * The name of the icon to use. The name should be of the form:
       * `iconset_name:icon_name`.
       */
      icon: {
        type: String
      },

      /**
       * The name of the theme to used, if one is specified by the
       * iconset.
       */
      theme: {
        type: String
      },

      /**
       * If using iron-icon without an iconset, you can set the src to be
       * the URL of an individual icon image file. Note that this will take
       * precedence over a given icon attribute.
       */
      src: {
        type: String
      },

      /**
       * @type {!Polymer.IronMeta}
       */
      _meta: {
        value: _polymerLegacy.Base.create('iron-meta', {
          type: 'iconset'
        })
      }
    },
    observers: ['_updateIcon(_meta, isAttached)', '_updateIcon(theme, isAttached)', '_srcChanged(src, isAttached)', '_iconChanged(icon, isAttached)'],
    _DEFAULT_ICONSET: 'icons',
    _iconChanged: function _iconChanged(icon) {
      var parts = (icon || '').split(':');
      this._iconName = parts.pop();
      this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;

      this._updateIcon();
    },
    _srcChanged: function _srcChanged(src) {
      this._updateIcon();
    },
    _usesIconset: function _usesIconset() {
      return this.icon || !this.src;
    },

    /** @suppress {visibility} */
    _updateIcon: function _updateIcon() {
      if (this._usesIconset()) {
        if (this._img && this._img.parentNode) {
          (0, _polymerDom.dom)(this.root).removeChild(this._img);
        }

        if (this._iconName === '') {
          if (this._iconset) {
            this._iconset.removeIcon(this);
          }
        } else if (this._iconsetName && this._meta) {
          this._iconset =
          /** @type {?Polymer.Iconset} */
          this._meta.byKey(this._iconsetName);

          if (this._iconset) {
            this._iconset.applyIcon(this, this._iconName, this.theme);

            this.unlisten(window, 'iron-iconset-added', '_updateIcon');
          } else {
            this.listen(window, 'iron-iconset-added', '_updateIcon');
          }
        }
      } else {
        if (this._iconset) {
          this._iconset.removeIcon(this);
        }

        if (!this._img) {
          this._img = document.createElement('img');
          this._img.style.width = '100%';
          this._img.style.height = '100%';
          this._img.draggable = false;
        }

        this._img.src = this.src;
        (0, _polymerDom.dom)(this.root).appendChild(this._img);
      }
    }
  });
});