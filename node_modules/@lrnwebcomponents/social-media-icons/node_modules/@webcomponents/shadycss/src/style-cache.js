define(["exports"], function (_exports) {
  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  'use strict';

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var StyleCache =
  /*#__PURE__*/
  function () {
    function StyleCache() {
      var typeMax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      babelHelpers.classCallCheck(this, StyleCache);
      // map element name -> [{properties, styleElement, scopeSelector}]
      this.cache = {};
      /** @type {number} */

      this.typeMax = typeMax;
    }

    babelHelpers.createClass(StyleCache, [{
      key: "_validate",
      value: function _validate(cacheEntry, properties, ownPropertyNames) {
        for (var idx = 0; idx < ownPropertyNames.length; idx++) {
          var pn = ownPropertyNames[idx];

          if (cacheEntry.properties[pn] !== properties[pn]) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "store",
      value: function store(tagname, properties, styleElement, scopeSelector) {
        var list = this.cache[tagname] || [];
        list.push({
          properties: properties,
          styleElement: styleElement,
          scopeSelector: scopeSelector
        });

        if (list.length > this.typeMax) {
          list.shift();
        }

        this.cache[tagname] = list;
      }
    }, {
      key: "fetch",
      value: function fetch(tagname, properties, ownPropertyNames) {
        var list = this.cache[tagname];

        if (!list) {
          return;
        } // reverse list for most-recent lookups


        for (var idx = list.length - 1; idx >= 0; idx--) {
          var entry = list[idx];

          if (this._validate(entry, properties, ownPropertyNames)) {
            return entry;
          }
        }
      }
    }]);
    return StyleCache;
  }();

  _exports.default = StyleCache;
});